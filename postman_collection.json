{
	"info": {
		"_postman_id": "document-genai-collection-v1",
		"name": "Document-Aware GenAI Assistant API",
		"description": "Complete API collection for testing the Document-Aware GenAI Assistant with automated tests and environment variables",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "document-genai-api"
	},
	"item": [
		{
			"name": "üè• Health & Status",
			"item": [
				{
					"name": "Health Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has status field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData.status).to.eql('healthy');",
									"});",
									"",
									"pm.test(\"Response has version and timestamp\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('version');",
									"    pm.expect(jsonData).to.have.property('timestamp');",
									"});",
									"",
									"console.log(\"‚úÖ Health check passed - API is running!\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/health",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"health"
							]
						},
						"description": "Check if the API server is running and healthy. Returns status, version, and timestamp."
					},
					"response": [
						{
							"name": "Healthy Response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/health",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"health"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"status\": \"healthy\",\n    \"version\": \"1.0.0\",\n    \"timestamp\": \"2025-07-13T10:30:00.000Z\"\n}"
						}
					]
				}
			],
			"description": "Health check and status monitoring endpoints"
		},
		{
			"name": "üìÑ Document Management",
			"item": [
				{
					"name": "Upload Document",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has document_id\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('document_id');",
									"    pm.expect(jsonData.document_id).to.not.be.empty;",
									"    ",
									"    // Store document_id for use in other requests",
									"    pm.environment.set('document_id', jsonData.document_id);",
									"    console.log(\"üìÑ Document ID saved:\", jsonData.document_id);",
									"});",
									"",
									"pm.test(\"Response has summary\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('summary');",
									"    pm.expect(jsonData.summary).to.not.be.empty;",
									"    ",
									"    // Store summary for reference",
									"    pm.environment.set('document_summary', jsonData.summary);",
									"    console.log(\"üìã Summary:\", jsonData.summary.substring(0, 100) + \"...\");",
									"});",
									"",
									"pm.test(\"Response has required fields\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('filename');",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData.status).to.eql('processed');",
									"});",
									"",
									"pm.test(\"Created timestamp is present\", function () {",
									"    var jsonData = pm.response.json();",
									"    if (jsonData.created_at) {",
									"        pm.expect(jsonData.created_at).to.be.a('string');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": [],
									"description": "Select a PDF or TXT file to upload (max 50MB)"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/upload",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"upload"
							]
						},
						"description": "Upload a document (PDF or TXT) for processing. Returns document_id, filename, summary, and processing status."
					},
					"response": [
						{
							"name": "Successful Upload",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "sample_document.txt"
										}
									]
								},
								"url": {
									"raw": "{{base_url}}/upload",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"upload"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"document_id\": \"doc_abc123xyz789\",\n    \"filename\": \"sample_document.txt\",\n    \"summary\": \"This document discusses machine learning algorithms including supervised learning methods like linear regression and random forest, unsupervised techniques such as clustering and PCA, and their applications in various industries including healthcare and finance.\",\n    \"status\": \"processed\",\n    \"created_at\": \"2025-07-13T10:30:15.123Z\"\n}"
						}
					]
				},
				{
					"name": "List Documents",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has documents array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('documents');",
									"    pm.expect(jsonData.documents).to.be.an('array');",
									"});",
									"",
									"pm.test(\"Documents have required fields\", function () {",
									"    var jsonData = pm.response.json();",
									"    if (jsonData.documents.length > 0) {",
									"        var firstDoc = jsonData.documents[0];",
									"        pm.expect(firstDoc).to.have.property('document_id');",
									"        pm.expect(firstDoc).to.have.property('filename');",
									"        pm.expect(firstDoc).to.have.property('status');",
									"    }",
									"    console.log(\"üìö Found\", jsonData.documents.length, \"documents\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/documents",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"documents"
							]
						},
						"description": "Retrieve a list of all uploaded and processed documents."
					},
					"response": [
						{
							"name": "Documents List",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/documents",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"documents"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"documents\": [\n        {\n            \"document_id\": \"doc_abc123xyz789\",\n            \"filename\": \"sample_document.txt\",\n            \"status\": \"processed\"\n        },\n        {\n            \"document_id\": \"doc_def456uvw012\",\n            \"filename\": \"research_paper.pdf\",\n            \"status\": \"processed\"\n        }\n    ]\n}"
						}
					]
				}
			],
			"description": "Document upload, processing, and management endpoints"
		},
		{
			"name": "‚ùì Question & Answer",
			"item": [
				{
					"name": "Ask Question",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains answer\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('answer');",
									"    pm.expect(jsonData.answer).to.not.be.empty;",
									"    console.log(\"ü§ñ AI Answer:\", jsonData.answer.substring(0, 150) + \"...\");",
									"});",
									"",
									"pm.test(\"Response has confidence score\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('confidence');",
									"    pm.expect(jsonData.confidence).to.be.within(0, 1);",
									"    console.log(\"üéØ Confidence:\", jsonData.confidence);",
									"});",
									"",
									"pm.test(\"Response has references\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('references');",
									"    pm.expect(jsonData.references).to.be.an('array');",
									"});",
									"",
									"pm.test(\"Source chunks are optional\", function () {",
									"    var jsonData = pm.response.json();",
									"    if (jsonData.source_chunks) {",
									"        pm.expect(jsonData.source_chunks).to.be.an('array');",
									"    }",
									"});",
									"",
									"// Store the answer for potential follow-up",
									"var jsonData = pm.response.json();",
									"pm.environment.set('last_answer', jsonData.answer);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"document_id\": \"{{document_id}}\",\n    \"question\": \"What are the main topics discussed in this document?\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/ask",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"ask"
							]
						},
						"description": "Ask a question about the uploaded document. Question must be 5-1000 characters. Returns answer, confidence score, references, and optional source chunks."
					},
					"response": [
						{
							"name": "Question Answered",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"document_id\": \"doc_abc123xyz789\",\n    \"question\": \"What are the main topics discussed in this document?\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/ask",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"ask"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"answer\": \"The main topics discussed in this document include machine learning algorithms, specifically covering supervised learning techniques like linear regression and random forest, unsupervised learning methods such as K-means clustering and Principal Component Analysis (PCA), and their practical applications across various sectors including healthcare, finance, and technology.\",\n    \"references\": [\n        \"Document: sample_document.txt\",\n        \"Section: Machine Learning Fundamentals\",\n        \"Section: Algorithm Applications\"\n    ],\n    \"confidence\": 0.92,\n    \"source_chunks\": [\n        \"Machine learning algorithms can be broadly categorized into supervised and unsupervised learning methods...\",\n        \"Applications of these algorithms span across multiple industries including healthcare for diagnosis...\"\n    ]\n}"
						}
					]
				},
				{
					"name": "Ask Specific Question",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Answer addresses specific question\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.answer).to.not.be.empty;",
									"    pm.expect(jsonData.confidence).to.be.above(0.5);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"document_id\": \"{{document_id}}\",\n    \"question\": \"Which supervised learning algorithms are mentioned in the document?\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/ask",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"ask"
							]
						},
						"description": "Ask a specific technical question about the document content."
					},
					"response": []
				}
			],
			"description": "Question and answer functionality with confidence scoring and source references"
		},
		{
			"name": "üéØ Challenge Mode",
			"item": [
				{
					"name": "Generate Challenge Questions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains questions\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('questions');",
									"    pm.expect(jsonData.questions).to.be.an('array');",
									"    pm.expect(jsonData.questions.length).to.be.above(0);",
									"    console.log(\"üéØ Generated\", jsonData.questions.length, \"questions\");",
									"});",
									"",
									"pm.test(\"Questions have required structure\", function () {",
									"    var jsonData = pm.response.json();",
									"    if (jsonData.questions.length > 0) {",
									"        var firstQ = jsonData.questions[0];",
									"        pm.expect(firstQ).to.have.property('id');",
									"        pm.expect(firstQ).to.have.property('question');",
									"        pm.expect(firstQ).to.have.property('options');",
									"        pm.expect(firstQ).to.have.property('correct_answer');",
									"        pm.expect(firstQ).to.have.property('difficulty');",
									"        pm.expect(firstQ).to.have.property('type');",
									"        pm.expect(firstQ.options).to.be.an('array');",
									"        pm.expect(firstQ.type).to.eql('multiple_choice');",
									"    }",
									"});",
									"",
									"pm.test(\"Difficulty matches request\", function () {",
									"    var jsonData = pm.response.json();",
									"    if (jsonData.questions.length > 0) {",
									"        var firstQ = jsonData.questions[0];",
									"        pm.expect(firstQ.difficulty).to.be.oneOf(['easy', 'medium', 'hard']);",
									"    }",
									"});",
									"",
									"// Store first question for evaluation test",
									"var jsonData = pm.response.json();",
									"if (jsonData.questions && jsonData.questions.length > 0) {",
									"    var firstQ = jsonData.questions[0];",
									"    pm.environment.set('challenge_question_id', firstQ.id);",
									"    pm.environment.set('challenge_question_text', firstQ.question);",
									"    pm.environment.set('challenge_correct_answer', firstQ.correct_answer);",
									"    pm.environment.set('challenge_options', JSON.stringify(firstQ.options));",
									"    pm.environment.set('challenge_difficulty', firstQ.difficulty);",
									"    console.log(\"üíæ Saved question for evaluation:\", firstQ.question.substring(0, 50) + \"...\");",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"document_id\": \"{{document_id}}\",\n    \"difficulty\": \"medium\",\n    \"num_questions\": 3\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/challenge",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"challenge"
							]
						},
						"description": "Generate challenge questions based on document content. Difficulty: easy|medium|hard. Number of questions: 1-10."
					},
					"response": [
						{
							"name": "Challenge Questions Generated",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"document_id\": \"doc_abc123xyz789\",\n    \"difficulty\": \"medium\",\n    \"num_questions\": 3\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/challenge",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"challenge"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"questions\": [\n        {\n            \"id\": \"q1_med_001\",\n            \"question\": \"Which supervised learning algorithm is best suited for predicting continuous numerical values?\",\n            \"options\": [\n                \"K-Means Clustering\",\n                \"Linear Regression\",\n                \"Principal Component Analysis\",\n                \"Association Rules\"\n            ],\n            \"correct_answer\": \"Linear Regression\",\n            \"explanation\": \"Linear regression is specifically designed for predicting continuous numerical values by finding the best-fitting line through data points.\",\n            \"difficulty\": \"medium\",\n            \"type\": \"multiple_choice\"\n        },\n        {\n            \"id\": \"q2_med_002\",\n            \"question\": \"What is the primary purpose of Principal Component Analysis (PCA)?\",\n            \"options\": [\n                \"Classification of data points\",\n                \"Dimensionality reduction\",\n                \"Clustering similar items\",\n                \"Predicting future values\"\n            ],\n            \"correct_answer\": \"Dimensionality reduction\",\n            \"explanation\": \"PCA is used to reduce the number of dimensions in a dataset while preserving most of the important information.\",\n            \"difficulty\": \"medium\",\n            \"type\": \"multiple_choice\"\n        },\n        {\n            \"id\": \"q3_med_003\",\n            \"question\": \"In which industry sector is machine learning NOT commonly mentioned for applications?\",\n            \"options\": [\n                \"Healthcare\",\n                \"Finance\",\n                \"Technology\",\n                \"Agriculture\"\n            ],\n            \"correct_answer\": \"Agriculture\",\n            \"explanation\": \"Based on the document, healthcare, finance, and technology are the primary sectors mentioned for ML applications.\",\n            \"difficulty\": \"medium\",\n            \"type\": \"multiple_choice\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Generate Easy Questions",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"document_id\": \"{{document_id}}\",\n    \"difficulty\": \"easy\",\n    \"num_questions\": 2\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/challenge",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"challenge"
							]
						},
						"description": "Generate easy-level questions for basic comprehension testing."
					},
					"response": []
				},
				{
					"name": "Generate Hard Questions",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"document_id\": \"{{document_id}}\",\n    \"difficulty\": \"hard\",\n    \"num_questions\": 5\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/challenge",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"challenge"
							]
						},
						"description": "Generate challenging questions that test advanced understanding and analytical thinking."
					},
					"response": []
				}
			],
			"description": "Challenge question generation with multiple difficulty levels"
		},
		{
			"name": "üèÜ Answer Evaluation",
			"item": [
				{
					"name": "Evaluate Correct Answer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Evaluation response has required fields\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('score');",
									"    pm.expect(jsonData).to.have.property('feedback');",
									"    pm.expect(jsonData).to.have.property('correct_answer');",
									"    pm.expect(jsonData).to.have.property('is_correct');",
									"    pm.expect(jsonData).to.have.property('references');",
									"});",
									"",
									"pm.test(\"Score is within valid range\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.score).to.be.within(0, 100);",
									"});",
									"",
									"pm.test(\"Correct answer gives high score\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.score).to.be.above(80);",
									"    pm.expect(jsonData.is_correct).to.be.true;",
									"    console.log(\"‚úÖ Correct answer scored:\", jsonData.score, \"points\");",
									"});",
									"",
									"pm.test(\"Feedback is provided\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.feedback).to.not.be.empty;",
									"    console.log(\"üí¨ Feedback:\", jsonData.feedback);",
									"});",
									"",
									"pm.test(\"References are provided\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.references).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"document_id\": \"{{document_id}}\",\n    \"question\": \"{{challenge_question_text}}\",\n    \"user_answer\": \"{{challenge_correct_answer}}\",\n    \"correct_answer\": \"{{challenge_correct_answer}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/evaluate",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"evaluate"
							]
						},
						"description": "Evaluate a correct answer to test the scoring system. Should return high score and positive feedback."
					},
					"response": [
						{
							"name": "Correct Answer Evaluation",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"document_id\": \"doc_abc123xyz789\",\n    \"question\": \"Which supervised learning algorithm is best suited for predicting continuous numerical values?\",\n    \"user_answer\": \"Linear Regression\",\n    \"correct_answer\": \"Linear Regression\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/evaluate",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"evaluate"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"score\": 100,\n    \"feedback\": \"Excellent! That's absolutely correct. Linear regression is indeed the best choice for predicting continuous numerical values as it models the relationship between variables using a linear equation.\",\n    \"references\": [\n        \"Document: sample_document.txt\",\n        \"Section: Supervised Learning Methods\",\n        \"Algorithm: Linear Regression\"\n    ],\n    \"correct_answer\": \"Linear Regression\",\n    \"is_correct\": true\n}"
						}
					]
				},
				{
					"name": "Evaluate Wrong Answer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Wrong answer gives low score\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.score).to.be.below(50);",
									"    pm.expect(jsonData.is_correct).to.be.false;",
									"    console.log(\"‚ùå Wrong answer scored:\", jsonData.score, \"points\");",
									"});",
									"",
									"pm.test(\"Corrective feedback provided\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.feedback).to.include('correct answer');",
									"    console.log(\"üìö Learning feedback:\", jsonData.feedback);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"document_id\": \"{{document_id}}\",\n    \"question\": \"{{challenge_question_text}}\",\n    \"user_answer\": \"Wrong Answer Choice\",\n    \"correct_answer\": \"{{challenge_correct_answer}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/evaluate",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"evaluate"
							]
						},
						"description": "Test evaluation with an incorrect answer to verify scoring and feedback system."
					},
					"response": []
				},
				{
					"name": "Evaluate Partial Answer",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"document_id\": \"{{document_id}}\",\n    \"question\": \"What are machine learning algorithms used for?\",\n    \"user_answer\": \"They are used for making predictions\",\n    \"correct_answer\": \"Machine learning algorithms are used for making predictions, classification, clustering, and pattern recognition in data\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/evaluate",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"evaluate"
							]
						},
						"description": "Test evaluation with a partially correct answer to see how the system handles nuanced responses."
					},
					"response": []
				}
			],
			"description": "Answer evaluation with scoring, feedback, and correctness validation"
		},
		{
			"name": "‚ùå Error Testing",
			"item": [
				{
					"name": "Upload Invalid File Type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 or 422 for invalid file\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400, 422]);",
									"});",
									"",
									"pm.test(\"Error response has proper structure\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('error');",
									"    console.log(\"üö´ Error response:\", jsonData.error);",
									"});",
									"",
									"pm.test(\"Error mentions file type restriction\", function () {",
									"    var responseText = pm.response.text();",
									"    pm.expect(responseText.toLowerCase()).to.satisfy(function(text) {",
									"        return text.includes('file') || text.includes('type') || text.includes('format');",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": [],
									"description": "Try uploading a non-PDF/TXT file (like .jpg, .docx, .zip) to test error handling"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/upload",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"upload"
							]
						},
						"description": "Test error handling when uploading an invalid file type."
					},
					"response": [
						{
							"name": "Invalid File Type Error",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "image.jpg"
										}
									]
								},
								"url": {
									"raw": "{{base_url}}/upload",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"upload"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"error\": \"Invalid file type\",\n    \"detail\": \"Only PDF and TXT files are supported\",\n    \"timestamp\": \"2025-07-13T10:35:00.000Z\"\n}"
						}
					]
				},
				{
					"name": "Ask Question - Empty Question",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Empty question validation error\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400, 422]);",
									"});",
									"",
									"pm.test(\"Error response mentions validation\", function () {",
									"    var responseText = pm.response.text();",
									"    pm.expect(responseText.toLowerCase()).to.satisfy(function(text) {",
									"        return text.includes('question') || text.includes('length') || text.includes('required');",
									"    });",
									"    console.log(\"üö´ Validation error:\", responseText);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"document_id\": \"{{document_id}}\",\n    \"question\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/ask",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"ask"
							]
						},
						"description": "Test validation error when submitting an empty question (min_length=5)."
					},
					"response": []
				},
				{
					"name": "Ask Question - Too Long Question",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Question too long validation error\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400, 422]);",
									"});",
									"",
									"pm.test(\"Error mentions length limit\", function () {",
									"    var responseText = pm.response.text();",
									"    pm.expect(responseText.toLowerCase()).to.include('length');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"document_id\": \"{{document_id}}\",\n    \"question\": \"This is an extremely long question that exceeds the maximum allowed length of 1000 characters for testing validation purposes. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/ask",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"ask"
							]
						},
						"description": "Test validation error when submitting a question longer than 1000 characters."
					},
					"response": []
				},
				{
					"name": "Ask Question - Invalid Document ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Invalid document ID returns 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Error mentions document not found\", function () {",
									"    var responseText = pm.response.text();",
									"    pm.expect(responseText.toLowerCase()).to.include('not found');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"document_id\": \"invalid-document-id-12345\",\n    \"question\": \"What is this document about?\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/ask",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"ask"
							]
						},
						"description": "Test error handling when using an invalid or non-existent document ID."
					},
					"response": []
				},
				{
					"name": "Challenge - Invalid Difficulty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Invalid difficulty validation error\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400, 422]);",
									"});",
									"",
									"pm.test(\"Error mentions difficulty values\", function () {",
									"    var responseText = pm.response.text();",
									"    pm.expect(responseText.toLowerCase()).to.satisfy(function(text) {",
									"        return text.includes('difficulty') || text.includes('easy') || text.includes('medium') || text.includes('hard');",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"document_id\": \"{{document_id}}\",\n    \"difficulty\": \"impossible\",\n    \"num_questions\": 2\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/challenge",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"challenge"
							]
						},
						"description": "Test validation error when using invalid difficulty level (must be easy|medium|hard)."
					},
					"response": []
				},
				{
					"name": "Challenge - Too Many Questions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Too many questions validation error\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400, 422]);",
									"});",
									"",
									"pm.test(\"Error mentions question limit\", function () {",
									"    var responseText = pm.response.text();",
									"    pm.expect(responseText.toLowerCase()).to.satisfy(function(text) {",
									"        return text.includes('questions') || text.includes('limit') || text.includes('maximum');",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"document_id\": \"{{document_id}}\",\n    \"difficulty\": \"medium\",\n    \"num_questions\": 15\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/challenge",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"challenge"
							]
						},
						"description": "Test validation error when requesting too many questions (max=10)."
					},
					"response": []
				}
			],
			"description": "Error handling and input validation testing"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global pre-request script",
					"",
					"// Auto-set base_url if not already set",
					"if (!pm.environment.get('base_url')) {",
					"    pm.environment.set('base_url', 'http://localhost:8000');",
					"    console.log(\"üîß Set default base_url: http://localhost:8000\");",
					"}",
					"",
					"// Add timestamp to each request",
					"pm.environment.set('request_timestamp', new Date().toISOString());",
					"",
					"// Log current request",
					"console.log(\"\\nüöÄ Executing:\", pm.info.requestName);",
					"console.log(\"üìÖ Time:\", pm.environment.get('request_timestamp'));",
					"",
					"// Show current environment variables (useful for debugging)",
					"if (pm.environment.get('document_id')) {",
					"    console.log(\"üìÑ Using document_id:\", pm.environment.get('document_id'));",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global test script",
					"",
					"// Log response time for all requests",
					"pm.test(\"Response time is reasonable\", function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(30000); // 30 seconds max",
					"    console.log(\"‚è±Ô∏è Response time:\", pm.response.responseTime + \"ms\");",
					"});",
					"",
					"// Log response size",
					"console.log(\"üì¶ Response size:\", pm.response.responseSize, \"bytes\");",
					"",
					"// Check for common headers",
					"pm.test(\"Response has Content-Type header\", function () {",
					"    pm.expect(pm.response.headers.get('Content-Type')).to.exist;",
					"});",
					"",
					"// Log status code",
					"console.log(\"üìä Status Code:\", pm.response.code, pm.response.status);",
					"",
					"// For error responses, log the error details",
					"if (pm.response.code >= 400) {",
					"    try {",
					"        var errorData = pm.response.json();",
					"        console.log(\"‚ùå Error Details:\", errorData);",
					"    } catch (e) {",
					"        console.log(\"‚ùå Error Response:\", pm.response.text());",
					"    }",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8000",
			"type": "string",
			"description": "Base URL for the Document-Aware GenAI Assistant API"
		},
		{
			"key": "api_version",
			"value": "1.0.0",
			"type": "string",
			"description": "Current API version"
		}
	]
}
